// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pg_trgm, ltree, pgcrypto]
}

// Enums
enum AuthProvider {
  EMAIL
  GOOGLE
  FACEBOOK
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  DELETED
}

enum ShopStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLING
  SHIPPED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

model OAuthAccount {
  id           String   @id @default(uuid())
  provider     String   // 'google', 'facebook', etc.
  providerId   String   // The user's ID from the OAuth provider
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  expiresAt    DateTime
  isValid      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId, isValid])
  @@index([refreshToken])
  @@index([expiresAt])
  @@index([isValid])
}

enum ShipmentStatus {
  PENDING
  PICKED
  IN_TRANSIT
  DELIVERED
  RETURNED
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  REJECTED
}

// Models
model User {
  id            String         @id @default(uuid())
  email         String         @unique
  passwordHash  String?
  name          String
  phone         String?
  avatar        String?
  status        UserStatus     @default(PENDING)
  emailVerified Boolean        @default(false)
  lastLoginAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  
  // Authentication
  authProvider      AuthProvider?  @default(EMAIL)
  providerId        String?        @unique
  
  // Relations
  roles                UserRole[]
  oauthAccounts        OAuthAccount[]
  sessions             Session[]
  ownedShops           Shop[]           @relation("ShopOwner")
  staffShops           ShopStaff[]
  addresses            Address[]
  cart                 Cart?
  orders               Order[]
  reviews              Review[]         @relation("Reviewer")
  reviewReplies        Review[]         @relation("ReviewReply")
  sentMessages         Message[]        @relation("MessageSender")
  conversations        Conversation[]   @relation("BuyerConversations")
  notifications        Notification[]
  wishlists            Wishlist[]
  auditLogs            AuditLog[]
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  users       UserRole[]
}

model UserRole {
  id          String    @id @default(uuid())
  userId      String
  roleId      String
  shopId      String?
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  shop        Shop?     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId, shopId])
}

model Shop {
  id            String         @id @default(uuid())
  name          String
  slug          String         @unique
  description   String?
  logo          String?
  banner        String?
  ownerId       String
  status        ShopStatus     @default(PENDING)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  owner         User           @relation("ShopOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  staff         ShopStaff[]
  products      Product[]
  orders        Order[]
  addresses     Address[]
  conversations Conversation[]
  userRoles     UserRole[]
  media         Media[]
}

model ShopStaff {
  id          String   @id @default(uuid())
  shopId      String
  userId      String
  role        String   // 'OWNER' or 'STAFF'
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([shopId, userId])
  @@index([shopId])
  @@index([userId])
}

model Address {
  id          String    @id @default(uuid())
  userId      String?
  shopId      String?
  label       String
  recipient   String
  phone       String
  line1       String
  line2       String?
  district    String
  city        String
  province    String
  country     String    @default("Thailand")
  postcode    String
  isDefault   Boolean   @default(false)
  type        String?   // 'shipping' or 'billing'
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user             User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop             Shop?     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shippingOrders   Order[]   @relation("OrderShippingAddress")
  billingOrders    Order[]   @relation("OrderBillingAddress")
}

model Category {
  id          String     @id @default(uuid())
  parentId    String?
  name        String
  slug        String     @unique
  description String?
  image       String?
  isActive    Boolean    @default(true)
  position    Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: SetNull)
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
  
  @@index([parentId])
  @@index([slug])
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  logo        String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  products    Product[]
  
  @@index([slug])
}

model Product {
  id           String          @id @default(uuid())
  shopId       String
  name         String
  slug         String
  description  String?
  status       ProductStatus   @default(DRAFT)
  brandId      String?
  categoryId   String?
  price        Decimal         @default(0)
  comparePrice Decimal?
  sku          String?
  barcode      String?
  quantity     Int             @default(0)
  weight       Decimal?
  length       Decimal?
  width        Decimal?
  height       Decimal?
  ratingAvg    Float           @default(0)
  ratingCount  Int             @default(0)
  viewCount    Int             @default(0)
  isFeatured   Boolean         @default(false)
  isPublished  Boolean         @default(false)
  publishedAt  DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
  // Relations
  shop         Shop            @relation(fields: [shopId], references: [id], onDelete: Cascade)
  brand        Brand?          @relation(fields: [brandId], references: [id], onDelete: SetNull)
  category     Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  variants     ProductVariant[]
  media        Media[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  reviews      Review[]
  wishlistItems WishlistItem[]
  
  @@unique([shopId, slug])
  @@index([shopId])
  @@index([brandId])
  @@index([categoryId])
  @@index([status])
  @@index([isPublished])
}

model ProductVariant {
  id          String    @id @default(uuid())
  productId   String
  sku         String    @unique
  name        String
  price       Decimal   @default(0)
  compareAtPrice Decimal?
  barcode     String?
  weight      Decimal?
  length      Decimal?
  width       Decimal?
  height      Decimal?
  quantity    Int       @default(0)
  attrs       Json?     // Variant attributes (size, color, etc.)
  isActive    Boolean   @default(true)
  position    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[] @relation("WishlistItemVariant")
  inventoryLogs InventoryLog[]
  
  @@index([productId])
  @@index([sku])
}

model Media {
  id        String   @id @default(uuid())
  shopId    String
  productId String?
  url       String
  key       String
  mime      String
  size      Int
  width     Int?
  height    Int?
  isPrimary Boolean  @default(false)
  position  Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([shopId])
  @@index([productId])
}

model InventoryLog {
  id        String   @id @default(uuid())
  variantId String
  delta     Int      // Positive for addition, negative for subtraction
  quantity  Int      // New quantity after this operation
  reason    String   // 'PURCHASE', 'RETURN', 'ADJUSTMENT', etc.
  refType   String?  // Reference type (e.g., 'ORDER', 'RETURN', 'ADJUSTMENT')
  refId     String?  // Reference ID (order ID, return ID, etc.)
  metadata  Json?    // Additional metadata
  createdAt DateTime @default(now())
  
  // Relations
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  @@index([variantId])
  @@index([refType, refId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?    @unique // Null for guest carts
  sessionId String?    // For guest users
  currency  String     @default("THB")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  expiresAt DateTime?
  
  // Relations
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  order     Order?     @relation("OrderCart")
  
  @@unique([userId, sessionId])
  @@index([userId])
  @@index([sessionId])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  variantId String?
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  cart      Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  @@index([cartId])
  @@index([productId])
  @@index([variantId])
}

model Coupon {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  type        String   // 'PERCENT' or 'AMOUNT'
  value       Decimal
  maxDiscount Decimal?
  minSubtotal Decimal?  @default(0)
  maxUses     Int?
  uses        Int      @default(0)
  isActive    Boolean  @default(true)
  startsAt    DateTime
  endsAt      DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orders      Order[]  @relation("OrderCoupon")
  
  @@index([code])
  @@index([isActive])
  @@index([startsAt, endsAt])
}

model Order {
  id              String       @id @default(uuid())
  orderNumber     String      @unique
  userId          String
  shopId          String
  cartId          String?     @unique // Reference to cart if order was created from cart
  status          OrderStatus @default(PENDING)
  subtotal        Decimal     @db.Decimal(10, 2)
  tax             Decimal     @db.Decimal(10, 2)
  shipping        Decimal     @db.Decimal(10, 2)
  discount        Decimal     @db.Decimal(10, 2) @default(0)
  total           Decimal     @db.Decimal(10, 2)
  currency        String      @default("THB")
  shippingAddress Json        // Store address snapshot
  billingAddress  Json        // Store address snapshot
  customerNote    String?
  adminNote       String?
  paymentStatus   String      @default("PENDING") // PENDING, PAID, FAILED, REFUNDED, etc.
  paymentMethod   String?     // COD, CREDIT_CARD, etc.
  paymentId       String?     // Reference to payment gateway
  paidAt          DateTime?
  fulfilledAt     DateTime?
  cancelledAt     DateTime?
  cancelledReason String?
  trackingNumber  String?
  shippingMethod  String?
  shippingCost    Decimal?    @db.Decimal(10, 2)
  taxRate         Decimal?    @db.Decimal(10, 4)
  ipAddress       String?
  userAgent       String?
  referrer        String?
  couponId        String?     // Reference to applied coupon
  shippingAddressId String?   // Reference to shipping address
  billingAddressId  String?   // Reference to billing address
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Restrict)
  shop            Shop        @relation(fields: [shopId], references: [id], onDelete: Restrict)
  cart            Cart?       @relation("OrderCart", fields: [cartId], references: [id], onDelete: SetNull)
  coupon          Coupon?     @relation("OrderCoupon", fields: [couponId], references: [id], onDelete: SetNull)
  shippingAddressRef Address?  @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id], onDelete: SetNull)
  billingAddressRef  Address?  @relation("OrderBillingAddress", fields: [billingAddressId], references: [id], onDelete: SetNull)
  items           OrderItem[]
  payments        Payment[]
  paymentIntents  PaymentIntent[]
  shipments       Shipment[]
  reviews         Review[]    @relation("OrderReviews")
  
  @@index([userId])
  @@index([shopId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id              String   @id @default(uuid())
  orderId         String
  productId       String
  variantId       String?
  quantity        Int
  price           Decimal  @db.Decimal(10, 2)
  tax             Decimal  @db.Decimal(10, 2)
  discount        Decimal  @db.Decimal(10, 2) @default(0)
  total           Decimal  @db.Decimal(10, 2)
  name            String
  sku             String?
  barcode         String?
  weight          Decimal? @db.Decimal(10, 2)
  length          Decimal? @db.Decimal(10, 2)
  width           Decimal? @db.Decimal(10, 2)
  height          Decimal? @db.Decimal(10, 2)
  status          String   @default("PENDING") // PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED, RETURNED
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  returnRequested Boolean  @default(false)
  returnReason    String?
  returnStatus    String?  // PENDING, APPROVED, REJECTED, RECEIVED, REFUNDED
  returnRequestedAt DateTime?
  returnCompletedAt DateTime?
  
  // Relations
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  variant         ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  review          Review?  @relation("ReviewOrderItem")
  
  @@index([orderId])
  @@index([productId])
  @@index([variantId])
  @@index([status])
}

model Payment {
  id              String   @id @default(uuid())
  orderId         String
  transactionId   String?  // Reference to payment gateway transaction ID
  amount          Decimal  @db.Decimal(10, 2)
  currency        String   @default("THB")
  status          String   // 'pending', 'processing', 'completed', 'failed', 'refunded', 'partially_refunded'
  paymentMethod   String   // 'credit_card', 'bank_transfer', 'wallet', etc.
  paymentProvider String   // 'stripe', 'omise', 'manual', etc.
  fee             Decimal? @db.Decimal(10, 2)
  tax             Decimal? @db.Decimal(10, 2)
  metadata        Json?    // Additional payment details
  paidAt          DateTime?
  refundedAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([transactionId])
  @@index([status])
  @@index([createdAt])
}

model PaymentIntent {
  id            String   @id @default(uuid())
  orderId       String
  provider      String   // 'stripe', 'omise', etc.
  amount        Decimal
  currency      String   @default("THB")
  status        String   // 'requires_payment_method', 'requires_confirmation', 'requires_action', 'processing', 'requires_capture', 'canceled', 'succeeded'
  clientSecret  String?
  paymentMethod String?  // 'card', 'promptpay', 'internet_banking', etc.
  metadata      Json?    // Additional metadata from payment provider
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  
  @@index([orderId])
  @@index([status])
  @@index([createdAt])
}

model Transaction {
  id              String   @id @default(uuid())
  intentId        String
  type            String   // 'charge', 'refund', 'capture', 'void', etc.
  amount          Decimal
  currency        String   @default("THB")
  status          String   // 'pending', 'succeeded', 'failed'
  processorId     String?  // External processor ID (e.g., Stripe charge ID)
  failureCode     String?
  failureMessage  String?
  metadata        Json?    // Additional metadata
  createdAt       DateTime @default(now())
  
  // Relations
  intent          PaymentIntent @relation(fields: [intentId], references: [id], onDelete: Cascade)
  
  @@index([intentId])
  @@index([processorId])
  @@index([status])
  @@index([createdAt])
}

model Shipment {
  id             String         @id @default(uuid())
  orderId        String
  trackingNumber String?
  carrier        String?        // 'kerry', 'thailand-post', 'flash', etc.
  status         ShipmentStatus @default(PENDING)
  shippedAt      DateTime?
  deliveredAt    DateTime?
  trackingUrl    String?
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relations
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([trackingNumber])
  @@index([status])
}

model Review {
  id          String      @id @default(uuid())
  productId   String
  userId      String
  orderId     String?
  orderItemId String?     @unique // Only one review per order item
  rating      Int         @default(5)
  title       String
  body        String?
  status      ReviewStatus @default(PENDING)
  isAnonymous Boolean     @default(false)
  repliedById String?
  repliedAt   DateTime?
  replyText   String?
  parentId    String?     // For review replies
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User        @relation("Reviewer", fields: [userId], references: [id], onDelete: Cascade)
  order       Order?      @relation("OrderReviews", fields: [orderId], references: [id], onDelete: SetNull)
  orderItem   OrderItem?  @relation("ReviewOrderItem", fields: [orderItemId], references: [id], onDelete: SetNull)
  
  // For review replies
  repliedBy   User?       @relation("ReviewReply", fields: [repliedById], references: [id], onDelete: SetNull)
  replies     Review[]    @relation("ReviewReply")
  parent      Review?     @relation("ReviewReply", fields: [parentId], references: [id], onDelete: Cascade)
  
  @@index([productId])
  @@index([userId])
  @@index([orderItemId])
  @@index([status])
  @@index([rating])
}

model Conversation {
  id            String    @id @default(uuid())
  shopId        String
  buyerId       String
  lastMessageId String?   @unique
  status        String    @default("OPEN") // 'OPEN', 'CLOSED'
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  shop          Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  buyer         User      @relation("BuyerConversations", fields: [buyerId], references: [id], onDelete: Cascade)
  messages      Message[]
  lastMessage   Message?  @relation("ConversationLastMessage", fields: [lastMessageId], references: [id], onDelete: SetNull)
  
  @@unique([shopId, buyerId])
  @@index([shopId])
  @@index([buyerId])
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  content        String       @db.Text
  isRead         Boolean      @default(false)
  readAt         DateTime?
  metadata       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  conversationLastMessage Conversation[] @relation("ConversationLastMessage")
  
  @@index([conversationId])
  @@index([senderId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String   // e.g., 'ORDER_CREATED', 'ORDER_UPDATED', 'NEW_MESSAGE', etc.
  title     String
  message   String
  data      Json?    // Additional data
  readAt    DateTime?
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([readAt])
  @@index([createdAt])
}

model Wishlist {
  id        String         @id @default(uuid())
  userId    String
  name      String
  isPrivate Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  
  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
  
  @@index([userId])
}

model WishlistItem {
  id          String   @id @default(uuid())
  wishlistId  String
  productId   String
  variantId   String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  wishlist    Wishlist       @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product     Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant     ProductVariant? @relation("WishlistItemVariant", fields: [variantId], references: [id], onDelete: Cascade)
  
  @@unique([wishlistId, productId, variantId])
  @@index([wishlistId])
  @@index([productId])
  @@index([variantId])
}

model AuditLog {
  id         String   @id @default(uuid())
  actorId    String?
  entityType String   // e.g., 'User', 'Product', 'Order'
  entityId   String
  action     String   // 'CREATE', 'UPDATE', 'DELETE', 'STATUS_CHANGE', etc.
  oldValues  Json?    // Previous values (for updates)
  newValues  Json?    // New values
  ip         String?
  userAgent  String?
  metadata   Json?    // Additional context
  createdAt  DateTime @default(now())
  
  // Relations
  actor      User?    @relation(fields: [actorId], references: [id], onDelete: SetNull)
  
  @@index([entityType, entityId])
  @@index([action])
  @@index([actorId])
  @@index([createdAt])
}
