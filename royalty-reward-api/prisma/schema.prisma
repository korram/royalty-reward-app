// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enums
enum RoleName {
  ADMIN
  SHOP_OWNER
  SHOP_STAFF
  CUSTOMER
}

enum ShopStaffRole {
  OWNER
  STAFF
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum InventoryRefType {
  ORDER
  MANUAL
  ADJUST
}

enum CouponType {
  PERCENT
  AMOUNT
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLING
  SHIPPED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

enum ShipmentStatus {
  PENDING
  PICKED
  IN_TRANSIT
  DELIVERED
  RETURNED
}

enum ReviewStatus {
  PUBLISHED
  PENDING
  REJECTED
}

enum ConversationStatus {
  OPEN
  CLOSED
}

enum MessageRole {
  BUYER
  SELLER
  SYSTEM
}

enum TransactionType {
  CHARGE
  REFUND
}

enum OAuthProvider {
  google
  facebook
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  STATUS_CHANGE
}

/// Models
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String?  @map("password_hash")
  name         String?
  phone        String?
  avatar       String?
  status       String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  roles          UserRole[]
  oauthAccounts  OAuthAccount[]
  shopsOwned     Shop[]         @relation("ShopOwner")
  staffOf        ShopStaff[]
  addresses      Address[]
  carts          Cart[]
  orders         Order[]
  reviews        Review[]
  messages       Message[]      @relation("MessageSender")
  notifications  Notification[]
  wishlists      Wishlist[]
  auditLogs      AuditLog[]     @relation("AuditActor")
  conversations  Conversation[] @relation("BuyerConversations")
  reviewsReplied Review[]       @relation("ReviewReplyBy")

  @@map("users")
}

model Role {
  id        String     @id @default(cuid())
  name      RoleName   @unique
  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id     String  @id @default(cuid())
  userId String?
  roleId String
  shopId String?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  role Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  shop Shop? @relation(fields: [shopId], references: [id], onDelete: SetNull)

  @@unique([userId, roleId, shopId])
  @@index([userId])
  @@index([shopId])
  @@map("user_roles")
}

model OAuthAccount {
  id                String        @id @default(cuid())
  provider          OAuthProvider
  providerAccountId String        @map("provider_account_id")
  userId            String        @map("user_id")
  accessToken       String?       @map("access_token")
  refreshToken      String?       @map("refresh_token")
  expiresAt         DateTime?     @map("expires_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("oauth_accounts")
}

model Shop {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  ownerUserId String?  @map("owner_user_id")
  status      String?
  createdAt   DateTime @default(now()) @map("created_at")

  owner         User?          @relation("ShopOwner", fields: [ownerUserId], references: [id], onDelete: SetNull)
  staff         ShopStaff[]
  products      Product[]
  addresses     Address[]
  media         Media[]
  conversations Conversation[]
  orders        Order[]
  userRoles     UserRole[]

  @@map("shops")
}

model ShopStaff {
  id          String        @id @default(cuid())
  shopId      String        @map("shop_id")
  userId      String        @map("user_id")
  role        ShopStaffRole
  permissions String[]

  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([shopId, userId])
  @@index([userId])
  @@map("shop_staff")
}

model Address {
  id        String  @id @default(cuid())
  userId    String? @map("user_id")
  shopId    String? @map("shop_id")
  label     String
  line1     String
  line2     String?
  district  String
  province  String
  country   String
  postcode  String
  isDefault Boolean @default(false) @map("is_default")

  user           User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  shop           Shop?   @relation(fields: [shopId], references: [id], onDelete: SetNull)
  ordersShipping Order[] @relation("ShippingAddress")
  ordersBilling  Order[] @relation("BillingAddress")

  @@index([userId, isDefault])
  @@index([shopId, isDefault])
  @@map("addresses")
}

model Category {
  id       String  @id @default(cuid())
  parentId String? @map("parent_id")
  name     String
  slug     String  @unique
  path     String
  isActive Boolean @default(true) @map("is_active")

  parent   Category?  @relation("CategoryToParent", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryToParent")
  products Product[]

  @@index([parentId])
  @@map("categories")
}

model Brand {
  id   String @id @default(cuid())
  name String
  slug String @unique

  products Product[]

  @@map("brands")
}

model Product {
  id          String        @id @default(cuid())
  shopId      String        @map("shop_id")
  name        String
  slug        String
  description String?
  status      ProductStatus @default(DRAFT)
  brandId     String?       @map("brand_id")
  categoryId  String?       @map("category_id")
  ratingAvg   Decimal       @default(0) @map("rating_avg") @db.Decimal(3, 2)
  ratingCount Int           @default(0) @map("rating_count")

  shop          Shop             @relation(fields: [shopId], references: [id], onDelete: Cascade)
  brand         Brand?           @relation(fields: [brandId], references: [id], onDelete: SetNull)
  category      Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  variants      ProductVariant[]
  media         Media[]
  reviews       Review[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]

  @@unique([shopId, slug])
  @@index([brandId])
  @@index([categoryId])
  @@map("products")
}

model ProductVariant {
  id             String   @id @default(cuid())
  productId      String   @map("product_id")
  sku            String   @unique
  price          Decimal  @db.Decimal(12, 2)
  compareAtPrice Decimal? @map("compare_at_price") @db.Decimal(12, 2)
  currency       String   @db.Char(3)
  barcode        String?
  weight         Decimal? @db.Decimal(10, 2)
  dimensions     Json?
  attrs          Json
  stockQty       Int      @default(0) @map("stock_qty")
  isActive       Boolean  @default(true) @map("is_active")

  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventoryLogs InventoryLog[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]

  @@index([productId])
  @@map("product_variants")
}

model Media {
  id        String  @id @default(cuid())
  productId String? @map("product_id")
  shopId    String? @map("shop_id")
  url       String
  key       String
  mime      String
  size      Int
  isPrimary Boolean @default(false) @map("is_primary")
  position  Int     @default(0)

  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  shop    Shop?    @relation(fields: [shopId], references: [id], onDelete: SetNull)

  @@index([productId])
  @@index([shopId])
  @@map("media")
}

model InventoryLog {
  id        String           @id @default(cuid())
  variantId String           @map("variant_id")
  delta     Int
  reason    String
  refType   InventoryRefType @map("ref_type")
  refId     String?          @map("ref_id")
  createdAt DateTime         @default(now()) @map("created_at")

  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([variantId])
  @@index([refType, refId])
  @@map("inventory_logs")
}

model Cart {
  id         String   @id @default(cuid())
  userId     String?  @map("user_id")
  sessionKey String?  @unique @map("session_key")
  currency   String   @db.Char(3)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user  User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  items CartItem[]

  @@index([userId])
  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String  @map("cart_id")
  productId String? @map("product_id")
  variantId String? @map("variant_id")
  qty       Int
  unitPrice Decimal @map("unit_price") @db.Decimal(12, 2)

  cart    Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product?        @relation(fields: [productId], references: [id], onDelete: SetNull)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@unique([cartId, variantId])
  @@index([productId])
  @@map("cart_items")
}

model Coupon {
  id          String     @id @default(cuid())
  code        String     @unique
  type        CouponType
  value       Decimal    @db.Decimal(12, 2)
  maxDiscount Decimal?   @map("max_discount") @db.Decimal(12, 2)
  minSubtotal Decimal?   @map("min_subtotal") @db.Decimal(12, 2)
  usageLimit  Int?       @map("usage_limit")
  usedCount   Int        @default(0) @map("used_count")
  startsAt    DateTime?  @map("starts_at")
  endsAt      DateTime?  @map("ends_at")
  isActive    Boolean    @default(true) @map("is_active")

  @@index([isActive])
  @@map("coupons")
}

model Order {
  id                String        @id @default(cuid())
  userId            String?       @map("user_id")
  shopId            String?       @map("shop_id")
  code              String        @unique
  status            OrderStatus
  subtotal          Decimal       @db.Decimal(12, 2)
  shippingFee       Decimal       @map("shipping_fee") @db.Decimal(12, 2)
  discountTotal     Decimal       @map("discount_total") @db.Decimal(12, 2)
  taxTotal          Decimal       @map("tax_total") @db.Decimal(12, 2)
  total             Decimal       @db.Decimal(12, 2)
  currency          String        @db.Char(3)
  paymentStatus     PaymentStatus @map("payment_status")
  shippingAddressId String?       @map("shipping_address_id")
  billingAddressId  String?       @map("billing_address_id")
  notes             String?
  createdAt         DateTime      @default(now()) @map("created_at")

  user            User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  shop            Shop?           @relation(fields: [shopId], references: [id], onDelete: SetNull)
  shippingAddress Address?        @relation("ShippingAddress", fields: [shippingAddressId], references: [id], onDelete: SetNull)
  billingAddress  Address?        @relation("BillingAddress", fields: [billingAddressId], references: [id], onDelete: SetNull)
  items           OrderItem[]
  intents         PaymentIntent[]
  shipments       Shipment[]

  @@index([userId])
  @@index([shopId])
  @@map("orders")
}

model OrderItem {
  id           String  @id @default(cuid())
  orderId      String  @map("order_id")
  productId    String? @map("product_id")
  variantId    String? @map("variant_id")
  nameSnapshot String  @map("name_snapshot")
  skuSnapshot  String  @map("sku_snapshot")
  qty          Int
  unitPrice    Decimal @map("unit_price") @db.Decimal(12, 2)
  lineTotal    Decimal @map("line_total") @db.Decimal(12, 2)

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product?        @relation(fields: [productId], references: [id], onDelete: SetNull)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@map("order_items")
}

model PaymentIntent {
  id           String  @id @default(cuid())
  orderId      String  @map("order_id")
  provider     String
  clientSecret String  @map("client_secret")
  status       String
  amount       Decimal @db.Decimal(12, 2)
  currency     String  @db.Char(3)
  raw          Json

  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([orderId])
  @@map("payment_intents")
}

model Transaction {
  id        String          @id @default(cuid())
  intentId  String          @map("intent_id")
  type      TransactionType
  status    String
  raw       Json
  createdAt DateTime        @default(now()) @map("created_at")

  intent PaymentIntent @relation(fields: [intentId], references: [id], onDelete: Cascade)

  @@index([intentId])
  @@map("transactions")
}

model Shipment {
  id             String         @id @default(cuid())
  orderId        String         @map("order_id")
  carrier        String
  trackingNumber String
  status         ShipmentStatus
  createdAt      DateTime       @default(now()) @map("created_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("shipments")
}

model Review {
  id                  String       @id @default(cuid())
  productId           String       @map("product_id")
  userId              String       @map("user_id")
  rating              Int
  title               String?
  body                String?
  status              ReviewStatus @default(PENDING)
  repliedByShopUserId String?      @map("replied_by_shop_user_id")
  createdAt           DateTime     @default(now()) @map("created_at")

  product           Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  repliedByShopUser User?   @relation("ReviewReplyBy", fields: [repliedByShopUserId], references: [id], onDelete: SetNull)

  @@index([productId])
  @@index([userId])
  @@map("reviews")
}

model Conversation {
  id          String             @id @default(cuid())
  shopId      String?            @map("shop_id")
  buyerUserId String?            @map("buyer_user_id")
  status      ConversationStatus @default(OPEN)
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")

  shop     Shop?     @relation(fields: [shopId], references: [id], onDelete: SetNull)
  buyer    User?     @relation("BuyerConversations", fields: [buyerUserId], references: [id], onDelete: SetNull)
  messages Message[]

  @@index([shopId, buyerUserId])
  @@map("conversations")
}

model Message {
  id             String      @id @default(cuid())
  conversationId String      @map("conversation_id")
  senderUserId   String?     @map("sender_user_id")
  role           MessageRole
  body           String
  attachments    Json?
  readAt         DateTime?   @map("read_at")
  createdAt      DateTime    @default(now()) @map("created_at")

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User?        @relation("MessageSender", fields: [senderUserId], references: [id], onDelete: SetNull)

  @@index([conversationId])
  @@index([senderUserId])
  @@map("messages")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  type      String
  data      Json
  readAt    DateTime? @map("read_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, readAt])
  @@map("notifications")
}

model Wishlist {
  id     String @id @default(cuid())
  userId String @map("user_id")
  name   String

  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items WishlistItem[]

  @@index([userId])
  @@map("wishlists")
}

model WishlistItem {
  id         String  @id @default(cuid())
  wishlistId String  @map("wishlist_id")
  productId  String  @map("product_id")
  variantId  String? @map("variant_id")

  wishlist Wishlist        @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product  Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant  ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@unique([wishlistId, productId, variantId])
  @@index([productId])
  @@map("wishlist_items")
}

model AuditLog {
  id          String      @id @default(cuid())
  actorUserId String?     @map("actor_user_id")
  entity      String
  entityId    String      @map("entity_id")
  action      AuditAction
  diff        Json
  ip          String
  ua          String
  createdAt   DateTime    @default(now()) @map("created_at")

  actor User? @relation("AuditActor", fields: [actorUserId], references: [id], onDelete: SetNull)

  @@index([actorUserId])
  @@index([entity, entityId])
  @@map("audit_logs")
}
